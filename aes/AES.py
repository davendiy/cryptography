#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Excusa. Quod scripsi, scripsi

# @Author: David Zashkolny <root>
# @Date:   19-Feb-2020
# @Email:  davendiy@gmail.com
# @Last modified by:   root
# @Last modified time: 19-Feb-2020

from collections import deque
from modes import *

# TODO add doc


class _GFPoly:
    """
    Elements of GF(2^8).
    """

    # Aes polynomial: x^8 + x^4 + x^3 + x + 1
    _modulo = 0x011b

    def __init__(self, digit_value: int):
        self.val = digit_value

    def __add__(self, other):
        """ Addition is just XOR.
        """
        return _GFPoly(self.val ^ other.val)

    def __mul__(self, other):
        """ It's enough to implement multiplying by x and
        then just multiply self on other like monomial on polynomial.

        Multiplying by x is just shifting on the one position left.
        0x09 <-> x^7 + x^4 + x^3 + x + 1  |=*x=>   x^8 + x^5 + x^4 + x^2 + x <-> 0x136/

        If the result gets 8'th degree - we just XOR it with _modulo, e.g.:
        x^8 + x^5 + x^4 + x^2 + x  |=XOR _mod=> x^5 + x^3 + x^2 + 1
        """
        if isinstance(other, int):
            other = _GFPoly(other)
        res_val = 0
        for i in range(8):    # go through all the degrees of other's poly
            if (1 << i) & other.val:   # check whether i'th bit is zero
                tmp = self.val         # (same that i-th degree exists)
                for j in range(i):     # multiply i times at x
                    tmp = tmp << 1
                    if tmp >= 256:     # modulo if it's necessary
                        tmp = tmp ^ _GFPoly._modulo
                res_val ^= tmp     # add the i-th result to the global res
        return _GFPoly(res_val)

    def __pow__(self, n):
        """ Binary raising to the power of element.
        If n equals to -1 - means that we need to find the inverse element.

        GF(2^8) has 256 elements, hence its multiplicative group has 255 elements.
        Therefore, using the theorem about orders of elements, x ^ 255 == 1 for
        each x from GF(2^8), thus x ^ 254 == x ^ (-1).
        """
        if n == -1:
            n = 254
        res = _GFPoly(1)
        a = _GFPoly(self.val)
        while n > 0:          # binary raising
            if n & 1:
                res *= a
            a *= a
            n >>= 1
        return res

    def __rmul__(self, other):
        if isinstance(other, int):
            return _GFPoly(other) + self

    def __str__(self):
        return f"GFPoly({self.val})"

    def __repr__(self):
        return str(self)


class _GFFourTermPoly:
    """
    Elements of GF(2^8)[x] / (x^4 + 1).
    They look like polynomials a0 + a1 x + a2 x^2 + a3 x^3, where
    ai is from GF(2^8), i.e. it is just array of 4 bytes.
    """

    def __init__(self, *args):
        assert len(args) == 4

        self.val = []
        for el in args:
            if isinstance(el, int):
                self.val.append(_GFPoly(el))
            elif isinstance(el, _GFPoly):
                self.val.append(el)
            else:
                raise TypeError(f"Bad type for four term poly: {type(el)}")

    def __mul__(self, other):
        """ Multiplication defines as multiplication on matrix
        A = [[b0, b3, b2, b1],
             [b1, b0, b3, b2],
             [b2, b1, b0, b3],
             [b3, b2, b1, b0]],  where bi is corresponding
                                 coefficient from others polynomial.
        """
        tmp = deque([0, 3, 2, 1])
        res = [0, 0, 0, 0]
        for i in range(4):
            res[i] = _GFPoly(0)
            for j in range(4):
                res[i] += self.val[tmp[j]] * other.val[j]
            tmp.rotate(1)
        return _GFFourTermPoly(*res)

    def __str__(self):
        return f"GFFourTermPoly({self.val})"

    def __repr__(self):
        return str(self)


def _rotate_left(n, amount):
    tmp = n << amount
    tmp_right = tmp & 255
    tmp_left = tmp & ((1 << 16) - 256)
    tmp_left >>= 8
    return tmp_left | tmp_right


def _sub_byte(state):

    if isinstance(state, _GFPoly):
        res = (state ** -1).val
    else:
        res = (_GFPoly(state) ** -1).val
    res = res ^ _rotate_left(res, 4) ^ _rotate_left(res, 3) \
          ^ _rotate_left(res, 2) ^ _rotate_left(res, 1) ^ 0x63
    return res


def _inv_sub_byte(state):
    if isinstance(state, _GFPoly):
        state = state.val
    res = _rotate_left(state, 1) ^ \
          _rotate_left(state, 3) ^ _rotate_left(state, 6) ^ 0x5
    return (_GFPoly(res) ** -1).val


_S_BOX = tuple([_sub_byte(i) for i in range(256)])
_INV_S_BOX = tuple([_inv_sub_byte(i) for i in range(256)])


def _subBytes(state_matrix):
    res = [[_S_BOX[state_matrix[i][j]] for j in range(len(state_matrix[0]))]
            for i in range(len(state_matrix))]
    return res


def _invSubBytes(state_matrix):
    res = [[_INV_S_BOX[state_matrix[i][j]] for j in range(len(state_matrix[0]))]
            for i in range(len(state_matrix))]
    return res


def _shiftRows(state_matrix):
    res = [state_matrix[i][i:] + state_matrix[i][:i] for i in range(len(state_matrix))]
    return res


def _invShiftRows(state_matrix):
    res = [state_matrix[i][4-i:] + state_matrix[i][:4-i] for i in range(len(state_matrix))]
    return res


def _mixColumns(state_matrix):
    a = _GFFourTermPoly(0x02, 0x01, 0x01, 0x03)
    transposed = [[state_matrix[i][j] for i in range(len(state_matrix))]
                     for j in range(len(state_matrix[0]))]
    res = [(_GFFourTermPoly(*el) * a).val for el in transposed]
    return [[res[i][j].val for i in range(len(res))] for j in range(len(res[0]))]


def _invMixColumns(state_matrix):
    inv_a = _GFFourTermPoly(0x0e, 0x09, 0x0d, 0x0b)
    transposed = [[state_matrix[i][j] for i in range(len(state_matrix))]
                     for j in range(len(state_matrix[0]))]
    res = [(_GFFourTermPoly(*el) * inv_a).val for el in transposed]
    return [[res[i][j].val for i in range(len(res))] for j in range(len(res[0]))]


def _keyExpansion(key):
    assert len(key) == 16
    res_keys = [key[i:(i+4)] for i in range(0, 16, 4)]
    res_keys += [0] * (10 * len(res_keys))
    for i in range(10):
        tmp = res_keys[4*i + 3]

        tmp = tmp[1:] + tmp[:1]

        tmp = [_S_BOX[el] for el in tmp]

        tmp[0] ^= (_GFPoly(0x02) ** i).val
        res_keys[4*i + 4] = [x ^ y for x, y in zip(tmp, res_keys[4*i])]
        res_keys[4*i + 5] = [x ^ y for x, y in zip(res_keys[4*i + 4], res_keys[4*i + 1])]
        res_keys[4*i + 6] = [x ^ y for x, y in zip(res_keys[4*i + 5], res_keys[4*i + 2])]
        res_keys[4*i + 7] = [x ^ y for x, y in zip(res_keys[4*i + 6], res_keys[4*i + 3])]
    return res_keys


def _addRoundKey(state_matrix, key):
    transposed = [[state_matrix[i][j] for i in range(len(state_matrix))]
                     for j in range(len(state_matrix[0]))]
    res = [[x ^ y for x, y in zip(el_mat, el_key)] for el_mat, el_key in zip(transposed, key)]
    return [[res[i][j] for i in range(len(res))] for j in range(len(res[0]))]


def _encrypt(in_block, key, printt=False):
    in_block = list(in_block)
    key = list(key)

    if printt:
        print(f'\n[*] Encrypting...')

    keys = _keyExpansion(key)
    state = [[in_block[r + 4*c] for c in range(4)] for r in range(4)]

    if printt:
        print(f'Initial state: {state}')

    state = _addRoundKey(state, keys[:4])

    for i in range(1, 10):
        state = _subBytes(state)
        state = _shiftRows(state)
        state = _mixColumns(state)
        state = _addRoundKey(state, keys[4 * i: 4 * i + 4])

        if printt:
            print(f'Round: {i}, state: {state}')

    state = _subBytes(state)
    state = _shiftRows(state)
    state = _addRoundKey(state, keys[10 * 4:])

    if printt:
        print(f'Result state: {state}')
    return [state[i][j] for j in range(len(state[0])) for i in range(len(state))]


def _decrypt(out_block, key, printt=False):
    out_block = list(out_block)
    key = list(key)

    if printt:
        print(f'\n[*] Decrypting...')

    keys = _keyExpansion(key)
    state = [[out_block[r + 4*c] for c in range(4)] for r in range(4)]
    if printt:
        print(f'Initial state: {state}')

    state = _addRoundKey(state, keys[10 * 4:])
    for i in range(9, 0, -1):
        state = _invShiftRows(state)
        state = _invSubBytes(state)

        if printt:
            print(f'Round: {i}, state: {state}')
        state = _addRoundKey(state, keys[4 * i: 4 * i + 4])
        state = _invMixColumns(state)

    state = _invShiftRows(state)
    state = _invSubBytes(state)
    state = _addRoundKey(state, keys[0:4])

    if printt:
        print(f"Res state: {state}")
    return [state[i][j] for j in range(len(state[0])) for i in range(len(state))]


class _AES_cipher:

    def __init__(self, key, mode=MODE_ECB):
        self.key = key
        self._encrypt, self._decrypt = mode(_encrypt, _decrypt)

    def encrypt(self, message):
        return self._encrypt(message, self.key)

    def decrypt(self, message):
        return self._decrypt(message, self.key)


def new(key, mode=MODE_ECB):
    return _AES_cipher(key, mode)


if __name__ == '__main__':
    test_key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]

    _keyExpansion(test_key)

    Sbox = (
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    )

    InvSbox = (
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
    )

    rConstants = (0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
                  0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
                  0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
                  0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
                  0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
                  0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
                  0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
                  0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
                  0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
                  0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
                  0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
                  0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
                  0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
                  0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
                  0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
                  0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
                  0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
                  0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
                  0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
                  0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
                  0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
                  0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
                  0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
                  0xe8, 0xcb)

    R_CON = [(_GFPoly(0x02) ** i).val for i in range(255)]
    R_CON = tuple([R_CON[-1]] + R_CON[:-1])

    print("Is Sbox correct:", _S_BOX == Sbox)
    print("Is InvSbox correct", _INV_S_BOX == InvSbox)
    print("Is Rcon correct:", R_CON == rConstants)

    test_key = list(range(16))
    test_block = list(range(16))
    ciphertext = _encrypt(test_key, test_block)
    print("plaintext:", test_block)
    print("ciphertext:", ciphertext)
    print("decrypted cyphertext:", _decrypt(ciphertext, test_key))

    from Crypto.Cipher import AES

    cipher = AES.new(bytes(test_key), AES.MODE_ECB)
    data = bytes(test_block)
    ciphertext = cipher._encrypt(data)
    print("ciphertext using Crypro AES:", list(ciphertext))
